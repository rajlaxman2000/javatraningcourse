*************Attribute : scope  *****************
The scope of this bean: typically "singleton" (one shared instance, which will be returned by all calls to 
 getBean with the given id), 
 or "prototype" (independent instance resulting from each call to getBean). 
 Default is "singleton". Singletons are most commonly used, and are ideal for multi-threaded service objects. 
 Further scopes, such as "request" or "session", might be supported by extended bean factories (e.g. in a web 
 environment). 
 
 Note: This attribute will not be inherited by child bean definitions. Hence, it needs to be 
 	specified per concrete bean definition. Inner bean definitions inherit the singleton status of their 
 	containing bean definition, unless explicitly specified: The inner bean will be a singleton if the
 	containing bean is a singleton, and a prototype if the containing bean has any other scope.
 
Attribute : autowire
Controls whether bean properties are "autowired". This is an automagical process in which bean references
don't need to be coded explicitly in the XML bean definition file, but rather the Spring container works out 
dependencies. 

There are 5 modes: 
1. "no" The traditional Spring default. No automagical wiring. Bean references must be defined in the XML file
	via the element (or "ref" attribute). We recommend this in most cases as it makes documentation more explicit. 
2. "byName" Autowiring by property name. If a bean of class Cat exposes a "dog" property, Spring will try to 
 	set this to the value of the bean "dog" in the current container. If there is no matching bean by name, 
 	nothing special happens; use dependency-check="objects" to raise an error in that case. 
3. "byType" Autowiring if there is exactly one bean of the property type in the container. If there is more
	than one, a fatal error is raised, and you cannot use byType autowiring for that bean. If there is none, 
	nothing special happens; use dependency-check="objects" to raise an error in that case. 
4. "constructor" Analogous to "byType" for constructor arguments. If there is not exactly one bean of the
	constructor argument type in the bean factory, a fatal error is raised. 
5. "autodetect" Chooses "constructor" or "byType" through introspection of the bean class. If a default 
	constructor is found, "byType" gets applied.Note that explicit dependencies, 
	i.e. "property" and "constructor-arg" elements, always override autowiring. Autowire behavior can be
	combined with dependency checking, which will be performed after all autowiring has been completed. 
	Note: This attribute will not be inherited by child bean definitions. Hence, it needs to be specified per
	concrete bean definition.

Data Type : string
Default Value : default
Enumerated Values : 
	- default
	- no
	- byName
	- byType
	- constructor
	- auto detect